<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>终端 on My New Hugo Site</title>
    <link>http://guopuke.github.io/tags/%E7%BB%88%E7%AB%AF/</link>
    <description>Recent content in 终端 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Apr 2017 16:05:09 +0000</lastBuildDate>
    
	<atom:link href="http://guopuke.github.io/tags/%E7%BB%88%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git 常用命令整理</title>
      <link>http://guopuke.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 11 Apr 2017 16:05:09 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
      <description>git config 配置文件的三种级别  # 版本库级别: git config -e # 全局(用户主目录下): git config -e --global # 系统级: git config -e --system   添加修改配置文件参数  git config a.b something   不删除工作目录文件，仅删除暂存区的文件  git rm --cached cached.txt   跳过使用暂存区域直接提交  git commit -a -m &amp;quot;不使用git add 直接提交&amp;quot;   查找当前工作区的Git版本库位置  $ pwd /Applications/www/My blog/source $ git rev-parse --git-dir /Applications/www/My blog/.git   显示工作区根目录  git rev-parse -- /Applications/www/My blog   显示工作区根目录的相对目录  $ cd source/_posts git rev-parse --show-prefix source/_posts/   重新修改最新的提交, 改正作者和提交者的错误信息  $ git commit --amend --allow-empty --reset-author ## 参数说明: # --amend 对刚刚的提交进行修补,不产生新的提交 # --allow-empty 使空白提交被允许 # --reset-author 将Author提交者的ID同步修改,重置AuthorDate信息   精简查看日志  git log --pretty=oneline   精简格式的状态  git status -s   比较差异  # 工作区与提交暂存区(stage)对比: git diff # 工作区与HEAD(当前工作分支)对比: git diff HEAD # 提交暂存区与版本库文件比较: git diff --cached # 比较里程碑 A 和里程碑 B git diff A B # 比较工作区和里程碑 A git diff A   逐词比较  git diff --word-diff   文件追溯，找出谁修改过文件，由谁引入  git blame README # 只查看第2行后面的3行 git blame -L 2,+3 README   显示暂存区的目录树  git ls-file -s   通过Git日志重置master  $ git reflog show master| head -5 9cb12d3 master@{0}: reset: moving to 9cb12d3 f1fbdca master@{1}: reset: moving to HEAD^ cba158e master@{2}: commit: does master follow this new commit?</description>
    </item>
    
    <item>
      <title>MacOS 配置iTerm2 &#43; Oh My Zsh主题</title>
      <link>http://guopuke.github.io/post/macos-%E9%85%8D%E7%BD%AEiterm2-oh-my-zsh%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Thu, 16 Mar 2017 22:53:45 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/macos-%E9%85%8D%E7%BD%AEiterm2-oh-my-zsh%E4%B8%BB%E9%A2%98/</guid>
      <description>😏 想让你的终端也变成这样？Come On！跟着我左手右手一个慢动作&amp;hellip; ☝️ 1. Download - iTerm2
iTerm2官网下载地址
☝️ 2. Install oh-my-zsh now
🙄 Your terminal never felt this good before!
🙄 就像 Oh My Zsh 的主页上面说的：“当你用了这些非常酷的命令行工具后，人们来到你的电脑前，一定会对你的命令行大加称赞。迎来一片点赞。”
还有酱紫简单点带可爱风的小图标呢! 使用curl下载：
curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh  安装完成后，显示如下:
Cloning Oh My Zsh... Cloning into &#39;/Users/icafe/.oh-my-zsh&#39;... remote: Counting objects: 712, done. remote: Compressing objects: 100% (584/584), done. remote: Total 712 (delta 15), reused 522 (delta 4), pack-reused 0 Receiving objects: 100% (712/712), 443.58 KiB | 27.</description>
    </item>
    
    <item>
      <title>使用GitHub写Blog</title>
      <link>http://guopuke.github.io/post/%E4%BD%BF%E7%94%A8github%E5%86%99blog/</link>
      <pubDate>Thu, 16 Mar 2017 21:00:24 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/%E4%BD%BF%E7%94%A8github%E5%86%99blog/</guid>
      <description>创建GitHub Pages  新建一个GitHub的仓库, 仓库名称必须设置为$username.github.io (比如我的GitHub用户名为SurprisePeas, Repository填写SurprisePeas.github.io)  环境准备( 安装 Node.js Git ) 安装Git Node
brew install git brew install node   查看已安装的开源软件包、安装位置
 brew list brew list node  安装配置Hexo 搭建博客的核心
感兴趣想深入了解Hexo的同学可以查看Hexo官网解锁更多玩法。
 安装Hexo
 npm install hexo-cli -g   安装好hexo以后，在终端输入：hexo , 若出现下图，说明安装成功:
  初始化创建博客(blog)
 // 进入目录 cd &amp;lt;path&amp;gt; // 执行init初始化并创建blog项目文件 hexo init &amp;lt;blog&amp;gt; // 进入demo博客目录 cd blog // 根据dependencies配置安装所有的依赖包 npm install   初始化后的目录结构如图:  配置Blog项目</description>
    </item>
    
  </channel>
</rss>