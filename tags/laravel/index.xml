<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on My New Hugo Site</title>
    <link>http://guopuke.github.io/tags/laravel/</link>
    <description>Recent content in Laravel on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jul 2017 14:56:37 +0000</lastBuildDate>
    
	<atom:link href="http://guopuke.github.io/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JWTAuth运用到Laravel5</title>
      <link>http://guopuke.github.io/post/jwtauth%E8%BF%90%E7%94%A8%E5%88%B0laravel5/</link>
      <pubDate>Fri, 14 Jul 2017 14:56:37 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/jwtauth%E8%BF%90%E7%94%A8%E5%88%B0laravel5/</guid>
      <description>JSON Web Token Authentication for Laravel &amp;amp; Lumen ​ 现在项目基本全是前后端分离的开发模式，特别是在使用Angular这种前端框架来构建单页面应用程序时会发现配合 angular-locker 实现存储令牌等方面更加得心应手，So 此次项目决定用jwt-auth建立一套API规范来练练手。
​ jwt-auth使用JSON Web令牌（spec）在Laravel中提供了一种简单的身份验证手段，是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。
​
JWT定义及其组成 一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。
载荷（Payload） 我们先将用户认证的操作描述成一个JSON对象。其中添加了一些其他的信息，帮助今后收到这个JWT的服务器理解这个JWT。
{ &amp;quot;sub&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;iss&amp;quot;: &amp;quot;http://localhost:8000/auth/login&amp;quot;, &amp;quot;iat&amp;quot;: 1451888119, &amp;quot;exp&amp;quot;: 1454516119, &amp;quot;nbf&amp;quot;: 1451888119, &amp;quot;jti&amp;quot;: &amp;quot;37c107e4609ddbcc9c096ea5ee76c667&amp;quot; }  这里面的6个字段都是由JWT的标准所定义的。
 sub: 该JWT所面向的用户 iss: 该JWT的签发者 iat(issued at): 在什么时候签发的token exp(expires): token什么时候过期 nbf(not before)：token在此时间之前不能被接收处理 jti：JWT ID为web token提供唯一标识  详细定义
JWT的载荷形式是以base64编码得到的,base64编码上面的JSON可得到如下:
eyJzdWIiOiIxIiwiaXNzIjoiaHR0cDpcL1wvbG9jYWx ob3N0OjgwMDFcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNDUxODg4MTE5LCJleHAiOjE0NTQ1MTYxMTksIm5iZiI6MTQ1MTg4OD ExOSwianRpIjoiMzdjMTA3ZTQ2MDlkZGJjYzljMDk2ZWE1ZWU3NmM2NjcifQ  可使用Node.js进行解码翻译出如下格式:
var base64url = require(&#39;base64url&#39;) var header = { &amp;quot;from_user&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;target_user&amp;quot;: &amp;quot;A&amp;quot; } console.</description>
    </item>
    
    <item>
      <title>Laravel语法提示PHPStorm </title>
      <link>http://guopuke.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</link>
      <pubDate>Tue, 30 May 2017 16:21:50 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</guid>
      <description>添加 composer 依赖包 在 composer.json 文件里添加依赖包信息
 &amp;ldquo;barryvdh/laravel-ide-helper&amp;rdquo;:&amp;ldquo;dev-master&amp;rdquo;
&amp;ldquo;php artisan ide-helper:generate&amp;rdquo;
 &amp;quot;require&amp;quot;: { // other composer ... &amp;quot;barryvdh/laravel-ide-helper&amp;quot;:&amp;quot;dev-master&amp;quot; } &amp;quot;scripts&amp;quot;: { &amp;quot;post-update-cmd&amp;quot;: [ // other cmd.. // 以后执行 composer update 的时候会自动执行此扩展包的任务 &amp;quot;php artisan ide-helper:generate&amp;quot; ] },  添加service provider 服务 在你的Laravel项目 config/app.php 于 providers 添加如下代码注册为服务提供者，使其在每个环境下都加载进来：
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,  保存退出，执行 composer update 下载依赖包并会自动执行扩展包任务</description>
    </item>
    
  </channel>
</rss>