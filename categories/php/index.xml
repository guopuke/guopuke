<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on My New Hugo Site</title>
    <link>http://guopuke.github.io/categories/php/</link>
    <description>Recent content in Php on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Sep 2017 00:31:41 +0000</lastBuildDate>
    
	<atom:link href="http://guopuke.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP魔术方法、依赖注入、控制反转容器</title>
      <link>http://guopuke.github.io/post/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Fri, 15 Sep 2017 00:31:41 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</guid>
      <description>依赖注入 “注入”，就是把一个实例传递到另一个实例的内部。
控制反转容器（Ioc Container） 如果存在如下这样复杂的依赖关系，该如何解决呢？
$a = new A(new B(new D(new F)), new C(new E()));  IoC容器（控制反转）就是为了帮助我们解决因复杂的依赖注入而产生混乱的解决方案。
IoC容器需要满足2个最基本的功能：
 存储定义的类 实例化类   大概实现代码如下：
 Class Container { // 保存定义的类 private $_definitions; // 存储到$_definitions属性中, (类名,创建类) public function set($class, $definition) { $this-&amp;gt;_definitions[$class] = $definition; } // 查找$_definitions属性中的类 public function get($class, $params = []) { if () { $definition = $this-&amp;gt;_definitions[$class]; // 调用此类下的定义 return call_user_func($definition, $params); }else { echo &#39;Must callable&#39;;die; } } }  例1.</description>
    </item>
    
    <item>
      <title>物流信息API对接</title>
      <link>http://guopuke.github.io/post/%E7%89%A9%E6%B5%81%E4%BF%A1%E6%81%AFapi%E5%AF%B9%E6%8E%A5/</link>
      <pubDate>Wed, 06 Sep 2017 13:30:59 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/%E7%89%A9%E6%B5%81%E4%BF%A1%E6%81%AFapi%E5%AF%B9%E6%8E%A5/</guid>
      <description>​ 项目刚好涉及一小块儿订单部分，需要一个第三方的快递物流信息接口API做一个物流轨迹的跟踪。国内的快递100、快递鸟、快递网、聚合数据，国际快递的话使用 Trackingmore也不错。个人综合比较考虑一下，决定使用 快递鸟 物流数据平台。
注册 不方便的一个地方就是需要手机号收取验证码进行注册， 如果企业注册的话，可能会稍微麻烦一点。
提交申请后，按照提示填写企业、个人信息就行，会要求上传证件信息（无需等待审核）。
注册完成以后，到了用户管理界面，会有一个产品服务的选择购买，免费版3000次/天的足够非商城项目来使用了。购买完成后，如下展示的是可用的产品服务。
物流跟踪 物流追踪API提供物流订单监控服务，用户将订单内容订阅到快递鸟后，快递鸟对订单进行实时监控，当物流轨迹有更新时，实时获取数据，对数据进行格式化，计算运单预计到达时间、全流程的物流状态、当前所在城市等数据后，推送给用户。监控直到订单签收后结束。
参照 物流跟踪API文档
Yii2 - Code 因为用的是Yii2框架，根据官方的demo稍作修改，如下：
 文件路径 common/config/params-local.php增加以下配置参数  // 快递鸟物流API接口参数 &#39;LOGISTICS&#39; =&amp;gt; [ &#39;EBusinessID&#39; =&amp;gt; &#39;会员中心页 用户ID&#39;, &#39;AppKey&#39; =&amp;gt; &#39;会员中心页 API key&#39;, &#39;ReqURL&#39; =&amp;gt; &#39;http://api.kdniao.cc/api/dist&#39;, // 快递鸟物流跟踪请求地址 //&#39;ReqURL&#39; =&amp;gt; &#39;http://api.kdniao.cc/Ebusiness/EbusinessOrderHandle.aspx&#39;, // 即时查询物流信息请求地址 ],   后台填写好订单时，需要实现一个订阅快递鸟物流跟踪的方法，文件路径 backend/controllers/KdniaoController.php  public function actionSubscribe($requestData) { // 调试用,调用此方法时需传递以下3个参数的值 $requestData = [ &#39;OrderCode&#39; =&amp;gt; &#39;123123123123&#39;, // 商户订单号 &#39;ShipperCode&#39; =&amp;gt; &#39;SF&#39;, // 物流渠道商名称 &#39;LogisticCode&#39; =&amp;gt; &#39;123455672341&#39;, // 物流订单号 ]; $requestData = json_encode($requestData); $kdniao_params = Yii::$app-&amp;gt;params[ &#39;LOGISTICS&#39; ]; ksort($kdniao_params, SORT_STRING); list($AppKey, $EBusinessID, $ReqURL) = array_values($kdniao_params); $kdniao = new KdniaoLogistic($AppKey, $EBusinessID, $ReqURL); return $kdniao-&amp;gt;getOrderTracesByJson($requestData); }   SDK文件路径 common/sdk/KdniaoLogistic  &amp;lt;?</description>
    </item>
    
    <item>
      <title>微信小程序支付功能</title>
      <link>http://guopuke.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 17 Aug 2017 13:32:14 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</guid>
      <description>大致流程 实现微信支付主要分为以下两步：
​ 一、服务端携带参数首先向微信支付服务台生成预支付交易单获得prepay_id等参数并返回给客户端。
​ 二、前端获得服务端返回的参数后，携带参数并调用小程序内API方法 wx.requestPayment(OBJECT)
大致流程图：
配置前提  在小程序管理界面，点击 微信支付 菜单栏进行申请开通相关操作，获取权限及商户ID（已进行微信认证的账号才会显示）。进行申请时需要缴纳费用并会受到一份包含商户信息、证书的邮件（创建、查询订单不需要用到证书，本文不做介绍）。 在 设置 - 开发设置 里获取AppID、小程序密钥   Code Params
 &#39;open.pay&#39; =&amp;gt; [ // 小程序支付 &#39;lite&#39; =&amp;gt; [ &#39;appid&#39; =&amp;gt; &#39;*************&#39;, // 小程序ID &#39;mch_id&#39; =&amp;gt; &#39;*************&#39;, // 商户ID &#39;key&#39; =&amp;gt; &#39;*************&#39;, // 密钥 &#39;notify_url&#39; =&amp;gt; &#39;*************&#39;, // 回调地址 ], ],  业务代码流程 (Yii2框架)  客户端请求服务端生成订单，服务端请求微信生成统一下单参数返给前端，代码如下：
 $mch_id = Yii::$app-&amp;gt;params[ &#39;open.pay&#39; ][ &#39;lite&#39; ][ &#39;mch_id&#39; ]; $app_id = Yii::$app-&amp;gt;params[ &#39;open.</description>
    </item>
    
    <item>
      <title>PHP根据特定字段进行分组</title>
      <link>http://guopuke.github.io/post/php%E6%A0%B9%E6%8D%AE%E7%89%B9%E5%AE%9A%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84/</link>
      <pubDate>Fri, 28 Jul 2017 11:46:28 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/php%E6%A0%B9%E6%8D%AE%E7%89%B9%E5%AE%9A%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84/</guid>
      <description>如果你的数据是这样:
需要转换为如下格式
添加此函数可以进行转为
public function array_group_by($arr, $key) { $grouped = []; foreach ($arr as $value) { $grouped[$value[$key]][] = $value; } // 递归重组嵌套数组 if (func_num_args() &amp;gt; 2) { $args = func_get_args(); foreach ($grouped as $key =&amp;gt; $value) { $parms = array_merge([$value], array_slice($args, 2, func_num_args())); $grouped[$key] = call_user_func_array(&#39;array_group_by&#39;, $parms); } } return $grouped; }  </description>
    </item>
    
    <item>
      <title>php7新特性学习</title>
      <link>http://guopuke.github.io/post/php7%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 01 Jul 2017 00:36:44 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/php7%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</guid>
      <description>参考PHP官网个人记录学习
null合并运算符 // 支持链式语法操作,会返回第一个有值的数据 $username = $_GET[&#39;user&#39;] ?? $_POST[&#39;user&#39;] ?? &#39;nobody&#39;;  
返回值类型声明 // 返回类型声明指明了函数返回值的类型 function arraysSum(array ...$arrays): array { return array_map(function(array $array): int { return array_sum($array); }, $arrays); } print_r(arraysSum([1,2,3], [4,5,6], [7,8,9])); // 输出结果 Array ( [0] =&amp;gt; 6 [1] =&amp;gt; 15 [2] =&amp;gt; 24 )  太空船操作符（组合比较符） echo &amp;quot;a&amp;quot; &amp;lt;=&amp;gt; &amp;quot;a&amp;quot;; // 0 echo &amp;quot;a&amp;quot; &amp;lt;=&amp;gt; &amp;quot;b&amp;quot;; // -1 echo &amp;quot;b&amp;quot; &amp;lt;=&amp;gt; &amp;quot;a&amp;quot;; // 1 echo 1 &amp;lt;=&amp;gt; 1; // 0 echo 1 &amp;lt;=&amp;gt; 2; // -1 echo 2 &amp;lt;=&amp;gt; 1; // 1  匿名类 通过new class 来实例化一个匿名类，传递参数到匿名类的构造器，也可以扩展（extend）其他类、实现接口（implement interface），这可以用来替代一些“用后即焚”的完整类定义。</description>
    </item>
    
    <item>
      <title>Laravel语法提示PHPStorm </title>
      <link>http://guopuke.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</link>
      <pubDate>Tue, 30 May 2017 16:21:50 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/laravel%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BAphpstorm/</guid>
      <description>添加 composer 依赖包 在 composer.json 文件里添加依赖包信息
 &amp;ldquo;barryvdh/laravel-ide-helper&amp;rdquo;:&amp;ldquo;dev-master&amp;rdquo;
&amp;ldquo;php artisan ide-helper:generate&amp;rdquo;
 &amp;quot;require&amp;quot;: { // other composer ... &amp;quot;barryvdh/laravel-ide-helper&amp;quot;:&amp;quot;dev-master&amp;quot; } &amp;quot;scripts&amp;quot;: { &amp;quot;post-update-cmd&amp;quot;: [ // other cmd.. // 以后执行 composer update 的时候会自动执行此扩展包的任务 &amp;quot;php artisan ide-helper:generate&amp;quot; ] },  添加service provider 服务 在你的Laravel项目 config/app.php 于 providers 添加如下代码注册为服务提供者，使其在每个环境下都加载进来：
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,  保存退出，执行 composer update 下载依赖包并会自动执行扩展包任务</description>
    </item>
    
    <item>
      <title>Swoole 实现消息发送功能</title>
      <link>http://guopuke.github.io/post/swoole-%E5%AE%89%E8%A3%85%E9%85%8D%E5%90%88-mongodb%E5%AE%9E%E7%8E%B0-pc-%E5%90%8E%E7%AB%AF%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 22 May 2017 23:54:53 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/swoole-%E5%AE%89%E8%A3%85%E9%85%8D%E5%90%88-mongodb%E5%AE%9E%E7%8E%B0-pc-%E5%90%8E%E7%AB%AF%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</guid>
      <description>导语  Swoole 是 PHP 的一个扩展，使用纯C语言编写，Swoole底层内置了异步非阻塞、多线程的网络IO服务器。PHP程序员仅需处理事件回调即可，无需关心底层。 官网提供了PHP语言的异步多线程服务器，异步TCP/UDP网络客户端，异步MySQL，异步Redis，数据库连接池，AsyncTask，消息队列，毫秒定时器，异步文件读写，异步DNS查询。 Swoole内置了Http/WebSocket服务器端/客户端、Http2.0服务器端。  安装Swoole  下载地址：Downloads
 解包，进入swoole-src 目录执行
  ~ ᐅ phpize ~ ᐅ ./configure ~ ᐅ make ~ ᐅ sudo make install   打开 php.ini 文件添加扩展（具体根据自己使用的 PHP 路径）：   vi /usr/local/etc/php/7.0/php.ini
 extension=swoole.so   重启 PHP-FPM   sudo /usr/local/Cellar/php70/7.0.18_10/sbin/php70-fpm restart
  查看Swoole 扩展是否已安装成功   php -m
 ​
运行 Server  创建一个 server.php 文件，用来启动 Swoole 的服务  &amp;lt;?</description>
    </item>
    
    <item>
      <title>Mongodb 安装使用</title>
      <link>http://guopuke.github.io/post/mongodb-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 22 May 2017 23:22:08 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/mongodb-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
      <description>Mac 环境
安装Mongodb brew install mongodb  安装完以后可以看见有很明显的提示:
brew services start mongodb Or, if you don&#39;t want/need a background service you can just run: mongod --config /usr/local/etc/mongod.conf  为了方便使用, 将其设置为全局变量
// 在 ~/.bash_profile 添加PATH路径信息 ➜ ~ sudo vi ~/.bash_profile export PATH=&amp;quot;/usr/local/Cellar/mongodb/3.4.3/bin:$PATH&amp;quot;  启动 mongodb sudo mongod --dbpath=/usr/local/var/mongodb  启动成功后末尾会有如下信息
2017-05-22T23:18:24.487+0800 I FTDC [initandlisten] Initializing full-time diagnostic data capture with directory &#39;/usr/local/var/mongodb/diagnostic.data&#39; 2017-05-22T23:18:24.489+0800 I NETWORK [thread1] waiting for connections on port 27017  说明已经启动成功了， 如果不成功，可能就是数据库路径不正确，仔细看一下提示。启动的时候可定义数据库路径。</description>
    </item>
    
    <item>
      <title>PHP 面试题纪录</title>
      <link>http://guopuke.github.io/post/php%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Sun, 21 May 2017 10:32:37 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/php%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>数据库 连接数据库 $DB = new PDO(&amp;quot;mysql:host=localhost;dbname=mydatabase&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;&amp;quot;); $DB-&amp;gt;query(&amp;quot;SET NAMES UTF8&amp;quot;);  MyISAM与InnoDB索引的区别，还有哪些索引方式？ 1. MyISAM引擎是一种非事务性的引擎，提供高速存储和检索，以及全文搜索能力，适合数据仓库等查询频繁的应用 2. InnoDB则是一种支持事务的引擎。给MySQL提供了具有提交，回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。 3. hash索引、B-Tree索引、Full-text索引。。。  优化查询的过程是怎么样的？ 0. 先运行看看是否真的很慢，注意设置SQL_NO_CACHE 1. where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高 2. explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询） 3. order by limit 形式的sql语句让排序的表优先查 4. 了解业务方使用场景 5. 加索引时参照建索引的几大原则 6. 观察结果，不符合预期继续从0分析  两张表 city表和province表。分别为城市与省份的关系表。 city: id City provinceid 1 广州 1 2 深圳 1 3 惠州 1 4 长沙 2 5 武汉 3  province: id province 1 广东 2 湖南 3 湖北  （1） 写一条sql语句关系两个表，显示字段：城市id ，城市名， 所属省份 。如：</description>
    </item>
    
    <item>
      <title>Mac 配置 PHP_FPM</title>
      <link>http://guopuke.github.io/post/mac-%E9%85%8D%E7%BD%AE-php-fpm/</link>
      <pubDate>Fri, 28 Apr 2017 13:18:23 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/mac-%E9%85%8D%E7%BD%AE-php-fpm/</guid>
      <description>参考: [开发环境]Mac 配置 php-fpm
使用 brew 安装好 php 后, 运行php-fpm 时提示我如下错误信息：
ERROR: failed to open configuration file &#39;/private/etc/php-fpm.conf&#39;: No such file or directory (2) ERROR: failed to load configuration file &#39;/private/etc/php-fpm.conf&#39; ERROR: FPM initialization failed  错误信息显示，不能打开配置文件，cd /private/etc，发现没有 php-fpm.conf 文件，但是有 php-fpm.conf.default 文件。这个文件是默认配置，我们可以复制一份，改名为 php-fpm.conf，然后再根据需要改动配置。
cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf  执行 php-fpm，再次报错：
ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2) ERROR: failed to post process the configuration ERROR: FPM initialization failed  错误信息显示，不能打开错误日志文件。cd /usr/var/log 发现根本没有这个目录，甚至连 var 目录都没有，加上为了避免权限问题，干脆配置到 /usr/local/var/log 目录。</description>
    </item>
    
    <item>
      <title>Workerman - 高性能的PHP socket框架</title>
      <link>http://guopuke.github.io/post/workerman-%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84php-socket%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 20 Apr 2017 21:59:16 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/workerman-%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84php-socket%E6%A1%86%E6%9E%B6/</guid>
      <description>介绍 ​ WorkerMan是一款纯PHP开发的开源的高性能的PHP socket服务器框架，基于WorkerMan开发者可以开发出各种网络服务器，即时IM通讯，游戏服务器通讯，与硬件传感器通讯等等，开发这些应用程序我们无法直接使用Nginx/Apache + PHP来实现，几乎任何基于TCP/UDP通讯的服务端都可以用WorkerMan来开发。WorkerMan使得开发者摆脱PHP只能用于Web开发的束缚，向更广阔的前景发展。
特性  纯 PHP 开发
 支持PHP多进程
 支持TCP、UDP
 支持长连接
 支持各种应用层协议
 支持高并发
 支持服务平滑重启
 支持文件更新检测及自动加载
 支持以指定用户运行子进程
 支持对象或者资源永久保持
 高性能
 支持HHVM
 支持分布式部署
 支持守护进程化
 支持多端口监听
 支持标准输入输出重定向
  安装配置  pcntl扩展  pcntl 扩展是 PHP 在 Linux 环境下进程控制的扩展
 posix扩展  posix扩展使得PHP在Linux环境可以调用系统通过POSIX标准提供的接口
 libevent扩展 或者 Event扩展  libevent扩展(或者event扩展)使得PHP可以使用系统Epoll、Kqueue等高级事件处理机制，能够显著提高WorkerMan在高并发连接时CPU利用率。在高并发长连接相关应用中非常重要。（非必要安装，默认使用PHP 原生 Select 事件处理机制）
目录结构 Workerman // workerman内核代码 ├── Connection // socket连接相关 │ ├── ConnectionInterface.</description>
    </item>
    
    <item>
      <title>Homebrew 安装 PHP、Nginx、MySql</title>
      <link>http://guopuke.github.io/post/homebrew-%E5%AE%89%E8%A3%85-phpnginxmysql/</link>
      <pubDate>Wed, 19 Apr 2017 09:32:37 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/homebrew-%E5%AE%89%E8%A3%85-phpnginxmysql/</guid>
      <description>参考 全新安装 Mac OS Sierra (10.12) 并使用 HomeBrew 安装 ZSH + MNMP (Mac + Nginx + MySQL + PHP) 开发环境
安装 Mysql 查找 mysql
➜ ~ brew search mysql automysqlbackup mysql-connector-c homebrew/php/php53-mysqlnd_ms mysql-connector-c++ homebrew/php/php54-mysqlnd_ms mysql-sandbox homebrew/php/php55-mysqlnd_ms mysql-search-replace homebrew/php/php56-mysqlnd_ms mysql-utilities mysql mysql@5.5 mysql++ mysql@5.6 mysql-cluster mysqltuner Caskroom/cask/mysql-connector-python Caskroom/cask/mysql-shell Caskroom/cask/mysql-utilities Caskroom/cask/mysqlworkbench Caskroom/cask/navicat-for-mysql Caskroom/cask/sqlpro-for-mysql  查看版本信息
➜ ~ brew info mysql mysql: stable 5.7.17 (bottled)  执行安装
➜ ~ brew install mysql # 略.</description>
    </item>
    
    <item>
      <title>MAMP 环境安装 PHP 扩展</title>
      <link>http://guopuke.github.io/post/mamp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-php-%E6%89%A9%E5%B1%95/</link>
      <pubDate>Tue, 11 Apr 2017 14:41:42 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/mamp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-php-%E6%89%A9%E5%B1%95/</guid>
      <description>最近在研究Workerman (一个 PHP socket 服务器框架) ，需要使用到PCNTL扩展（支持 PHP 多线程操作），但因为自己一直使用的是 MMAP 集成环境，安装PHP 扩展总是会发生一些很迷的事情（填前段时间安装 Swoole 的坑。。），所以打算这次解决了它！
替换 Mac 自带 PHP 打开配置环境变量文件：
 vi ~/.bash_profile
 在全局变量里添加MAMP 的 PHP 路径：
export MAMP_PHP=/Applications/MAMP/bin/php/php7.1.1/bin export PATH=&amp;quot;$MAMP_PHP:$PATH&amp;quot;  查看 PHP 版本是否为 MAMP 当前使用的版本(使用的7.1版本):
 php -v
 PHP 7.1.1 (cli) (built: Jan 23 2017 15:09:57) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies  初始化 MAMP 的 PHP 因为 MAMP 自带的 PHP 没有包含源码，在 PHP源码下载 你当前使用的 MAMP 使用 PHP 版本，下载完成后解压：</description>
    </item>
    
    <item>
      <title>PHP 依赖注入</title>
      <link>http://guopuke.github.io/post/php-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Thu, 06 Apr 2017 13:38:41 +0000</pubDate>
      
      <guid>http://guopuke.github.io/post/php-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid>
      <description>依赖注入简单说就是通过构造注入，函数调用或者属性的设置来提供组件的赖关系。 下面是一个简单的实例化类：
&amp;lt;?php namespace Databases; class Databases { protected $adapter; public function __construct() { $this-&amp;gt;adapter = new MysqlAdapter; } } class MysqlAdapter {code...}  使用依赖注入重构，实现解耦：
&amp;lt;?php namespace Database; class Database { protected $adapter; public function __construct(MySqlAdapter $adapter) { $this-&amp;gt;adapter = $adapter; } } class MysqlAdapter {code...}  这样就可以通过外界给予 Database 类的依赖，不是让这个类自己产生依赖的对象。
控制反转 顾名思义，一个系统通过组织控制和对象的完全分离来实现”控制反转”。对于依赖注入，这就意味着通过在系统的其他地方控制和实例化依赖对象，从而实现了解耦。
依赖反转准则 依赖反转准则是面向对象设计准则 S.O.L.I.D 中的 “D” ，倡导 &amp;ldquo;依赖于抽象而不是具体&amp;rdquo;，依赖应该是接口或着抽象类，不是固定具体的实现。
&amp;lt;?php namespace Database; class Database { protected $adapter; public function __construct(AdapterInterface $adapter) { $this-&amp;gt;adapter = $adapter; } } interface AdapterInterface {} class MysqlAdapter implements AdapterInterface {code.</description>
    </item>
    
  </channel>
</rss>